{"version":3,"sources":["components/Card/Card.module.scss","components/Card/Card.jsx","views/Contacts/Contacts.module.scss","components/ContactForm/ContactForm.module.scss","components/ContactList/ContactList.module.scss","components/Filter/Filter.module.scss","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","redux/filter/filter-selector.js","components/Filter/Filter.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","views/Contacts/Contacts.jsx"],"names":["module","exports","Card","children","className","s","card","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","event","target","value","Error","form","preventDefault","label","type","onChange","pattern","title","required","button","ContactList","contacts","handleDelete","contactItems","map","id","item","textContainer","onClick","list","getFilter","state","filter","Filter","dispatch","useDispatch","useSelector","changeFilter","setToken","token","API","getContacts","a","getContactsRequest","getContactsSuccess","getContactsError","addContact","addContactRequest","addContactSuccess","addContactError","deleteContact","deleteContactRequest","deleteContactSuccess","deleteContactError","items","getLoading","isLoading","getInvalidated","isInvalidated","getFilteredContacts","createSelector","toLowerCase","includes","Contacts","props","navigate","useNavigate","authSelectors","getToken","contactsSelectors","filteredContacts","isLoggedIn","getIsLoggedIn","isCurrentUserRetreived","getIsCurrentUserRetreived","useEffect","replace","authOperations","contactsOperations","Container","find","contact","alert","filterCard","Loader"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,KAAO,qB,8FCKVC,EAJF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACd,OAAO,qBAAKC,UAAWC,IAAEC,KAAlB,SAAyBH,M,mBCFlCH,EAAOC,QAAU,CAAC,WAAa,+B,mBCA/BD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,OAAS,8B,mBCA/FD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,cAAgB,mCAAmC,OAAS,4BAA4B,KAAO,4B,mBCAlJD,EAAOC,QAAU,CAAC,MAAQ,wB,kiBC4EXM,EAzEK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACrB,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAOMC,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBN,EAAR,EAAQA,KAAMO,EAAd,EAAcA,MAEd,OAAQP,GACN,IAAK,OACHC,EAAQM,GACR,MACF,IAAK,SACHJ,EAAUI,GACV,MACF,QACE,MAAM,IAAIC,MAAJ,iCAAoCR,MAchD,OACE,8BACE,uBAAMN,UAAWC,IAAEc,KAAMX,SAZR,SAAAO,GACnBA,EAAMK,iBAEN,IAAMV,EAAOK,EAAMC,OAAON,KAAKO,MACzBL,EAASG,EAAMC,OAAOJ,OAAOK,MAEnCT,EAAS,CAAEE,OAAME,WAzBjBD,EAAQ,IACRE,EAAU,KA8BR,UACE,wBAAOT,UAAWC,IAAEgB,MAApB,iBAEE,uBACEC,KAAK,OACLZ,KAAK,OACLO,MAAOP,EACPa,SAAUT,EACVU,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,wBAAOtB,UAAWC,IAAEgB,MAApB,mBAEE,uBACEC,KAAK,MACLZ,KAAK,SACLO,MAAOL,EACPW,SAAUT,EACVU,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wBAAQtB,UAAWC,IAAEsB,OAAQL,KAAK,SAAlC,+B,iBClCOM,EA5BK,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,aACzBC,EAAeF,EAASG,KAAI,gBAAGC,EAAH,EAAGA,GAAIvB,EAAP,EAAOA,KAAME,EAAb,EAAaA,OAAb,OAChC,oBAAaR,UAAWC,IAAE6B,KAA1B,SACE,sBAAK9B,UAAWC,IAAE8B,cAAlB,UACE,iCACGzB,EADH,KACWE,KAEX,wBAAQqB,GAAIA,EAAI7B,UAAWC,IAAEsB,OAAQL,KAAK,SAASc,QAASN,EAA5D,wBALKG,MAYX,OAAO,oBAAI7B,UAAWC,IAAEgC,KAAjB,SAAwBN,K,yBCjBpBO,EAAY,SAAAC,GAAK,OAAIA,EAAMC,QCuBzBC,EAjBA,WACb,IAAMC,EAAWC,cACXH,EAASI,YAAYN,GAO3B,OACE,wBAAOlC,UAAWC,IAAEgB,MAApB,kCAEE,uBAAOC,KAAK,OAAOZ,KAAK,SAASO,MAAOuB,EAAQjB,SARnC,SAAAR,GACf,IAAQE,EAAUF,EAAMC,OAAhBC,MACRyB,EAASG,YAAa5B,W,+DCCb6B,EAAW,SAAAC,GACtBC,IAAaD,IAGFE,EAAc,yDAAM,WAAMP,GAAN,eAAAQ,EAAA,6DAC/BR,EAASS,eADsB,kBAGNH,MAHM,OAGvBnB,EAHuB,OAI7Ba,EAASU,YAAmBvB,IAJC,gDAM7Ba,EAASW,eANoB,yDAAN,uDAUdC,EACX,SAAC,GAAD,IAAG5C,EAAH,EAAGA,KAAME,EAAT,EAASA,OAAT,8CACA,WAAM8B,GAAN,SAAAQ,EAAA,6DACER,EAASa,eADX,kBAGUP,IAAe,CAAEtC,OAAME,WAHjC,OAII8B,EAASc,eAJb,gDAMId,EAASe,eANb,yDADA,uDAWWC,EAAgB,SAAAzB,GAAE,8CAAI,WAAMS,GAAN,SAAAQ,EAAA,6DACjCR,EAASiB,eADwB,kBAGzBX,IAAkBf,GAHO,OAI/BS,EAASkB,eAJsB,gDAM/BlB,EAASmB,eANsB,yDAAJ,uD,QCpClBZ,EAAc,SAAAV,GAAK,OAAIA,EAAMV,SAASiC,OACtCC,EAAa,SAAAxB,GAAK,OAAIA,EAAMV,SAASmC,WACrCC,EAAiB,SAAA1B,GAAK,OAAIA,EAAMV,SAASqC,eAEzCC,EAAsBC,YAAe,CAACnB,EAAaX,IAAY,SAACT,EAAUW,GAAX,OAC1EX,EAASW,QAAO,qBAAG9B,KAAgB2D,cAAcC,SAAS9B,EAAO6B,qB,OCkEpDE,EA7DE,SAAAC,GACf,IAAM9B,EAAWC,cACX8B,EAAWC,cACX3B,EAAQH,YAAY+B,IAAcC,UAClC/C,EAAWe,YAAYiC,EAAkB5B,aACzC6B,EAAmBlC,YAAYiC,EAAkBV,qBACjDH,EAAYpB,YAAYiC,EAAkBd,YAC1CG,EAAgBtB,YAAYiC,EAAkBZ,gBAC9Cc,EAAanC,YAAY+B,IAAcK,eACvCC,EAAyBrC,YAAY+B,IAAcO,2BAEzDC,qBAAU,WACHJ,GAAeE,GAAwBR,EAAS,SAAU,CAAEW,SAAS,MACzE,CAACX,EAAUM,EAAYE,IAE1BE,qBAAU,WACJpC,GAAOsC,IAAevC,SAASC,KAClC,CAACA,IAEJoC,qBAAU,WACJjB,GAAiBnB,GACnBL,EAAS4C,EAAmBrC,iBAE7B,CAACiB,EAAenB,EAAOL,IAc1B,OACE,eAAC6C,EAAA,EAAD,WACE,2CACA,cAACrF,EAAA,EAAD,UACE,cAAC,EAAD,CAAaM,SAXM,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,OAC5BiB,EAAS2D,MAAK,SAAAC,GAAO,OAAIA,EAAQ/E,OAASA,KAC5CgF,MAAM,GAAD,OAAIhF,EAAJ,gCAGPgC,EAAS4C,EAAmBhC,WAAW,CAAE5C,OAAME,iBAS7C,0CACA,qBAAKR,UAAWC,IAAEsF,WAAlB,SACE,cAACzF,EAAA,EAAD,UACE,cAAC,EAAD,QAGJ,cAACA,EAAA,EAAD,UACG8D,EACC,cAAC4B,EAAA,EAAD,IAEA,cAAC,EAAD,CAAa/D,SAAUiD,EAAkBhD,aA7BrB,SAAAf,GAC1B,IAAQkB,EAAOlB,EAAMC,OAAbiB,GACRS,EAAS4C,EAAmB5B,cAAczB","file":"static/js/Contacts.d46dd0b4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__35wN0\"};","import s from './Card.module.scss';\n\nconst Card = ({ children }) => {\n  return <div className={s.card}>{children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterCard\":\"Contacts_filterCard__3YCEF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1NiH1\",\"label\":\"ContactForm_label__3KgVy\",\"button\":\"ContactForm_button__1007G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3wSXY\",\"textContainer\":\"ContactList_textContainer__EdsWp\",\"button\":\"ContactList_button__197mh\",\"item\":\"ContactList_item__3lf8n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__2pNgv\"};","import s from './ContactForm.module.scss';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst ContactForm = ({ onSubmit }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const resetFieldsToDefault = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        throw new Error(`Unsupported text field ${name}`);\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const name = event.target.name.value;\n    const number = event.target.number.value;\n\n    onSubmit({ name, number });\n    resetFieldsToDefault();\n  };\n\n  return (\n    <div>\n      <form className={s.form} onSubmit={handleSubmit}>\n        <label className={s.label}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className={s.label}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button className={s.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import s from './ContactList.module.scss';\nimport { PropTypes } from 'prop-types';\n\nconst ContactList = ({ contacts, handleDelete }) => {\n  const contactItems = contacts.map(({ id, name, number }) => (\n    <li key={id} className={s.item}>\n      <div className={s.textContainer}>\n        <span>\n          {name}: {number}\n        </span>\n        <button id={id} className={s.button} type=\"button\" onClick={handleDelete}>\n          Delete\n        </button>\n      </div>\n    </li>\n  ));\n\n  return <ul className={s.list}>{contactItems}</ul>;\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  handleDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","export const getFilter = state => state.filter;\n","import s from './Filter.module.scss';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from '../../redux/filter/filter-actions';\nimport { getFilter } from './../../redux/filter/filter-selector';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const onChange = event => {\n    const { value } = event.target;\n    dispatch(changeFilter(value));\n  };\n\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input type=\"text\" name=\"filter\" value={filter} onChange={onChange} />\n    </label>\n  );\n};\n\nexport default Filter;\n","import * as API from 'api/api-client';\nimport {\n  getContactsRequest,\n  getContactsSuccess,\n  getContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './contacts-actions';\n\nexport const setToken = token => {\n  API.setToken(token);\n};\n\nexport const getContacts = () => async dispatch => {\n  dispatch(getContactsRequest());\n  try {\n    const contacts = await API.getContacts();\n    dispatch(getContactsSuccess(contacts));\n  } catch (error) {\n    dispatch(getContactsError());\n  }\n};\n\nexport const addContact =\n  ({ name, number }) =>\n  async dispatch => {\n    dispatch(addContactRequest());\n    try {\n      await API.addContact({ name, number });\n      dispatch(addContactSuccess());\n    } catch (error) {\n      dispatch(addContactError());\n    }\n  };\n\nexport const deleteContact = id => async dispatch => {\n  dispatch(deleteContactRequest());\n  try {\n    await API.deleteContact(id);\n    dispatch(deleteContactSuccess());\n  } catch (error) {\n    dispatch(deleteContactError());\n  }\n};\n","import { getFilter } from '../filter/filter-selector';\nimport { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getLoading = state => state.contacts.isLoading;\nexport const getInvalidated = state => state.contacts.isInvalidated;\n\nexport const getFilteredContacts = createSelector([getContacts, getFilter], (contacts, filter) =>\n  contacts.filter(({ name }) => name.toLowerCase().includes(filter.toLowerCase())),\n);\n","import s from './Contacts.module.scss';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport Container from 'components/Container';\nimport Card from 'components/Card';\nimport Loader from 'components/Loader';\nimport { contactsSelectors, contactsOperations } from 'redux/contacts';\nimport { authSelectors, authOperations } from 'redux/auth';\n\nconst Contacts = props => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const token = useSelector(authSelectors.getToken);\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const filteredContacts = useSelector(contactsSelectors.getFilteredContacts);\n  const isLoading = useSelector(contactsSelectors.getLoading);\n  const isInvalidated = useSelector(contactsSelectors.getInvalidated);\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\n  const isCurrentUserRetreived = useSelector(authSelectors.getIsCurrentUserRetreived);\n\n  useEffect(() => {\n    if (!isLoggedIn || !isCurrentUserRetreived) navigate('/login', { replace: true });\n  }, [navigate, isLoggedIn, isCurrentUserRetreived]);\n\n  useEffect(() => {\n    if (token) authOperations.setToken(token);\n  }, [token]);\n\n  useEffect(() => {\n    if (isInvalidated && token) {\n      dispatch(contactsOperations.getContacts());\n    }\n  }, [isInvalidated, token, dispatch]);\n\n  const handleDeleteContact = event => {\n    const { id } = event.target;\n    dispatch(contactsOperations.deleteContact(id));\n  };\n\n  const handleAddContact = ({ name, number }) => {\n    if (contacts.find(contact => contact.name === name)) {\n      alert(`${name} is already in the contacts`);\n      return;\n    }\n    dispatch(contactsOperations.addContact({ name, number }));\n  };\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <Card>\n        <ContactForm onSubmit={handleAddContact} />\n      </Card>\n\n      <h2>Contacts</h2>\n      <div className={s.filterCard}>\n        <Card>\n          <Filter />\n        </Card>\n      </div>\n      <Card>\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <ContactList contacts={filteredContacts} handleDelete={handleDeleteContact} />\n        )}\n      </Card>\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"sourceRoot":""}